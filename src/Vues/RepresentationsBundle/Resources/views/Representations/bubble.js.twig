{% extends "VuesRepresentationsBundle::d3_formatter.js.twig" %}

{% block vue %}

/**
 * On traite le json pour insérer ce qu'on veut dans les conteneurs
 */
(function ()
{
	console.log('vous êtes dans bubblevue');
	console.log('On a récupéré data :');
	console.log("{{ data }}");
	var jsonobjet = JSON.parse("{{ data }}");
	console.log("relations définies dans data :");
	console.log(jsonobjet.relations);
	var formateur = new D3_Formatter();
	var jsontree = formateur.to_tree(jsonobjet);

	var outils = new D3_Outils();

	/*console.log('On le transforme en :');
	console.log(jsongraph);
	console.log('Puis on insère ce qu\'on veut dans les conteneurs');*/
	var jsonchaine = JSON.stringify(jsontree,false);
	$('#conteneurD3').css('visibility','visible');
	$('#conteneurD3').html('');
	//$('#conteneurpage').css('visibility','visible');
	$('#conteneurpage').html('<pre>' + jsonchaine + '</pre>');

	//On crée deux sets de couleurs, un pour les noeuds, un pour les relations
	var ncolor = d3.scale.category10();
	var rcolor = d3.scale.category20();

	var view;

	// On recupere la taille de la div pour mettre le svg
	var width = $('#conteneurmenu').innerWidth(),
	  height = $("#conteneurmenu").innerHeight();

	var diameter = Math.min(width,height);

	//Le packlayout de D3 permet d'agencer des ensembles de cercles dans des cercles
	var pack = d3.layout.pack()
			.padding(5)
			.size([diameter, diameter])
			.value(function(d) { return d.size; })

	//On configure le svg qui contiendra toute la figure
	var svg = d3.select("#conteneurD3").append("svg")
			.attr("width", width)
			.attr("height", height)
		.append("g")
			.attr("id","dessin")
			.attr("depx",width/2)
			.attr("depy",height/2)
			.attr("rot",0)
			.attr("rotx",0)
			.attr("roty",0)
			.attr("sc",1)
			.attr("transform", "translate(" + width/2 + "," + height/2 + ")");

	//var svg = svg.append("g");

	//focus indique sur quel noeud doit se centrer la vue (au départ c'est la racine)
	var focus = jsontree;
	console.log(jsontree);
	//view contiendra un vecteur correspondant au zoom sur le focus (vecteur (x,y,r) où (x,y) = coordonnées du centre et r = taille de la zone visible)
	var view;

	//pack.nodes transforme le jsontree en un objet contenant les infos nécessaires au packlayout.
	//ces infos sont calculées automatiquement par D3 à partir du json qu'on lui fournit.
	var nodes = pack.nodes(jsontree);



	//On ajoute les cercles représentant les noeuds de l'arbre
	var circle = svg.selectAll("circle")
			.data(nodes)
		.enter().append("circle")
			.attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--jsontree"; })
			.style("fill", function(d) { return d.children ? ncolor(d.depth) : null; })
			.on("click", function(d) {
					if (focus !== d) zoomfonc(d), d3.event.stopPropagation();
			})

	//On ajoute le texte représentant le noeud dans chaque cercle.
	var text = svg.selectAll("text")
			.data(nodes)
		.enter()
			.append("text")
			.style("font-size", function(d) { return 2*Math.sqrt(d.r) + 'px'; } )
			.text(function(d) { 
				return ( d.type != "N" && d.type != "R" && d.type != "V" && d.type != "A" && d.name.length < 30) ? d.name : ''; 
			});

	var node = svg.selectAll("circle,text");

	zoomTo([jsontree.x, jsontree.y, jsontree.r * 2]);

	//Lance le zoom sur un noeud
	function zoomfonc(d) {
		focus = d;

		var transition = d3.transition()
				.duration(500)
				.tween("zoom", function(d) {
					var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);
					return function(t) { zoomTo(i(t)); };
				});
	}

	//Zoom sur une position
	function zoomTo(v) {
		var k = diameter / v[2]; view = v;
		circle.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
		text.attr("transform", function(d) { return "translate(" + (d.x - v[0] - d.r / 1.5) * k + "," + (d.y - v[1]) * k + ")"; });
		circle.attr("r", function(d) { return d.r * k; });
		text.style("font-size", function(d) { return 2*Math.sqrt(d.r) * k + 'px'; });
	}

	//On adapte la taille de la figure à la taille du conteneur
	d3.select(self.frameElement).style("height", diameter + "px");
	
	
	// On ajoute des etiquettes sur les noeuds
	$('svg g circle').tipsy({ 
		gravity: 'w', 
		html: true, 
		title: function() {
			var d = this.__data__;
			return "<div>"+ d.type + "</div><div class='floatingp'>" + d.name + "</div><p>" + d.description + "</p>";
		}
	});

	svg.attr("transform","translate(" + width/2 + "," + height/2 + ")");

	console.log('Fin : on a terminé d\'afficher la vue');
})();

{% endblock %}
