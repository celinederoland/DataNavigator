/**
 * On regarde les options indiquées
 * On récupère le json fabriqué par la partie serveur du relais (contrôleur) en lui donnant les options indiquées
 * On appelle la vue (script js) en lui donnant le json fabriqué
 */
(function()
{
	console.log('lancement de layout.js');
	//Récupération des valeurs (layout l150 à 209)

		//Source
		/*********************
			REPERE AJOUTER SOURCE
		**********************/
		if ($('#wordnet').attr('class') == 'activesource') { var source = 'wordnet'; }
		if ($('#dbpedia').attr('class') == 'activesource') { var source = 'dbpedia'; }
		if ($('#debian').attr('class') == 'activesource') { var source = 'debian'; }
		if ($('#humour').attr('class') == 'activesource') { var source = 'humour'; }

		//Vue
		/*********************
			REPERE AJOUTER VUE
		**********************/
		if ($('#radial').attr('class') == 'activevue') { var vue = 'radial'; }
		if ($('#indented').attr('class') == 'activevue') { var vue = 'indented'; }
		if ($('#bubble').attr('class') == 'activevue') { var vue = 'bubble'; }
		if ($('#force').attr('class') == 'activevue') { var vue = 'force'; }
		if ($('#json').attr('class') == 'activevue') { var vue = 'json'; }
		if ($('#jsongraph').attr('class') == 'activevue') { var vue = 'jsongraph'; }

		//Options
		var limite = $('#form_limite').val();
		if (limite == "") { limite = 2; }

		var relations = [];
		$('option:selected').each(function() {
			relations.push($(this).val());
		});
		var tabrelations = relations;
		if (relations.length == 0) { relations = '"all"'; }
		else { relations = '"' + relations.join('","') + '"'; }

		//Mot recherché
		var mot = '"' + $('#form_mot').val() + '"';

		console.log("layout a récupéré les options suivantes : ");
		console.log("mot recherché : " + mot);
		console.log("source : " + source);
		console.log("vue : " + vue);
		console.log("limite : " + limite);
		console.log("relations :" + relations);

	//Utilisation d'ajax pour placer le résultat dans le conteneurD3

		//On alerte le visiteur si il n'a pas rempli correctement tous les champs
		if (!source) { alert('vous devez sélectionner une source de données'); }
		else if (!vue) { alert('vous devez sélectionner une représentation'); }
		else if (mot == '""') { alert('vous devez entrer un mot'); }
		//Si il a bien tout rempli on fait le travail
		else 
		{ 
			console.log('layout va récupérer le json pour la source ' + source);
			//On récupère le json (layout l210)
			/*********************
				REPERE AJOUTER SOURCE
			**********************/
			if (source == 'wordnet') { 
				urlsrc = Routing.generate('sources_wordnet_json', { mot: mot, relations: relations, limite: limite });
			} 
			else if (source == 'dbpedia') { 
				urlsrc = Routing.generate('sources_db_pedia_bidon', { mot: mot, relations: relations, limite: limite });
			} 
			else if (source == 'debian') { 
				urlsrc = Routing.generate('sources_debian_bidon', { mot: mot, relations: relations, limite: limite });
			} 
			else if (source == 'humour') { 
				urlsrc = Routing.generate('sources_humour_bidon', { mot: mot, relations: relations, limite: limite });
			} 
			else { alert("Source " + source + " non prise en charge"); }
			console.log(urlsrc);

			//On enregistre la recherche dans l'historique
			console.log('enregistrement historique');
			urlhistorique = '{{ path("relais_relais_historique") }}';
			console.log(urlhistorique);
			$.post(
				urlhistorique,
				{
					"form[mot]":mot,
					"form[source]":source,
					"form[vue]":vue,
					"form[limite]":limite,
					"form[relations][]":tabrelations,
				},
				function(data) { console.log(data); }
			);

			//On récupère le json et on l'envoie à la source
			$.getJSON(
				urlsrc,
				//Quand on l'a récupéré : (layout l237)
				function(data)
				{
					console.log('layout a récupéré le json suivant :');
					console.log(data);
					console.log('layout appelle maintenant la vue à la route vues_representations_nomdemavue en lui donnant le json');
					//Il faut lancer le script adapté à la vue demandée
					/*********************
						REPERE AJOUTER VUE
					**********************/
					if (vue == 'json') 
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_json') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else if (vue == 'jsongraph') 
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_jsongraph') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else if (vue == 'bubble') 
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_bubble') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else if (vue == 'indented')
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_indented') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else if (vue == 'force') 
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_force') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else if (vue == 'radial') 
					{ 
						$.ajax({
							type:"POST",
							url:"{{ path('vues_representations_radial') }}",
							dataType:"script",
							data:{ 'data': JSON.stringify(data) },
							cache:false,
							success:function() { console.log('success'); }
						});
					}
					else { alert('vue ' + vue + ' non prise en charge'); }
				}
			); 
		}
})();

